const char* FRONTEND = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\" name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0\"/><meta name=\"theme-color\" content=\"#141520\"/><link rel=\"stylesheet\" href=\"index.css\"/><title>RAM-CONTROLLER</title></head><body><div id=\"panel\"><div id=\"top-controls\"><h3>MOVEMENT</h3><div class=\"joystick\" style=\"top: 0\"><div class=\"dial\"><div>â®™</div></div></div><div id=\"movement-ui\"><button id=\"accelerator\"><b>Gas</b></button><button id=\"reverse\"><b>Reverse</b></button></div></div><div id=\"visuals\"><h1 id=\"bot-name\">RAM RANCH</h1><p id=\"response\">Request Responses will be displayed here</p></div><div id=\"bottom-controls\"><h3>WEAPONS</h3><!-- <div style=\"right: 0\"></div> --><button id=\"battering-ram\" class=\"weapon-button\"><b>PUNCH</b></button><button id=\"sweep-toggle\" class=\"weapon-button\"><b>Sweep Toggle</b></button><button id=\"left-sweep\" class=\"weapon-button\"><b>Left Sweep</b></button><button id=\"right-sweep\" class=\"weapon-button\"><b>Right Sweep</b></button><!-- <div class=\"joystick\"><div class=\"stick\"></div></div><div class=\"joystick\" style=\"right: 0\"><div class=\"stick\"></div></div> --></div></div><style>:root {--accent: #0e0f17;--shadow: black;--accentt: rgba(11, 12, 17, 0.82);--highlight: #d27af0;--highlight2: #267dff;--fg: ghostwhite;--fg0: gray;--bg: #141520;overflow: hidden;font-family: Arial;font-size: large;color: var(--fg);}* {margin: 0;padding: 0;user-select: none;}*::-webkit-scrollbar {width: 0;height: 0;}*::-webkit-scrollbar-track, *::-webkit-scrollbar-thumb {background: transparent;}button:focus, select:focus, textarea:focus, input:focus {outline: none;}body {position: relative;background: var(--bg);width: 100vw;height: 100vh;display: flex;flex-direction: column;}#panel {position: relative;width: calc(100% - 50px);height: 100%;margin: 25px;background-color: var(--accent);border-radius: 50px;border-color: var(--fg);}#bot-name, h3 {height: fit-content;width: fit-content;position: absolute;margin: auto;left: 0; right: 0; top: 0; bottom: 0;}#top-controls, #bottom-controls, #visuals {position: relative;width: 100%;height: 40%;border: 2px solid var(--fg);border-radius: 50px;display: flex;align-items: center;justify-content: space-between;}#visuals {height: 20%;border: none;display: flex;align-items: center;}.joystick {background-color: var(--highlight2);height: 192px;width: 192px;border-radius: 64px;position: absolute;display: flex;align-items: center;justify-content: center;bottom: 0;margin: 64px;box-shadow: 0 0 20px 1px black;}.stick, .dial {background-color: var(--fg);border-radius: 64px;width: 128px;height: 128px;position: absolute;touch-action: none;text-align: center;box-shadow: 0 0 20px 1px black;}.dial {display: flex;justify-content: center;align-items: center;color: var(--accentt);}.dial div {width: min-content;position: absolute;top: 0;}#movement-ui {position: absolute;display: flex;flex-direction: column;align-items: center;justify-content: space-evenly;right: 0;width: 50%;height: 30%;}#accelerator, #reverse, .weapon-button {background-color: var(--highlight2);width: 100px;height: 30px;border-radius: 15px;border: 2px solid var(--fg);color: var(--fg);transition: box-shadow ease-in-out 250ms;}.moving {box-shadow: 0 0 10px 10px var(--highlight2);}</style><script>const panel = document.getElementById(`panel`),responseDisplay = document.getElementById(`response`),accelerator = document.getElementById(`accelerator`),reverseToggle = document.getElementById(`reverse`);const Command = {MOVE_FORWARD: 0,MOVE_BACKWARD: 1,TURN_LEFT: 2,TURN_RIGHT: 3,LEFT_SWEEP: 4,RIGHT_SWEEP: 5,SWEEP_ROUTINE: 6,RAM: 7,STOP: 8,};let history = {JoySticks: [],Dials: [],};const bufferDifferenceThreshold = 5,adcResolution = 255,_ = undefined;(() => {acceleratorSetup();reverseSetup();joystickSetup();dialSetup();document.getElementById(`battering-ram`).addEventListener(`click`, () => fetch(`?cmd=${Command.RAM}`));document.getElementById(`sweep-toggle`).addEventListener(`click`, () => fetch(`?cmd=${Command.SWEEP_ROUTINE}`));document.getElementById(`left-sweep`).addEventListener(`click`, () => fetch(`?cmd=${Command.LEFT_SWEEP}`));document.getElementById(`right-sweep`).addEventListener(`click`, () => fetch(`?cmd=${Command.RIGHT_SWEEP}`));})();function percentDifference(newValue, oldValue) { return Math.abs(newValue - oldValue)/oldValue * 100; }function getTouchID(e, target) {for(const i in e.touches)if(e.touches[i].target == target || target.contains(e.touches[i].target))return i;return -1;}function issueCommand(commandID, value) {fetch(!value ? `?cmd=${commandID}` : `?cmd=${commandID}-${value}`);}function stepOnBreak(element) {element.classList.remove(`moving`);issueCommand(Command.STOP);}function acceleratorSetup() {accelerator.addEventListener(`touchstart`, () => {accelerator.classList.add(`moving`);issueCommand(Command.MOVE_FORWARD, adcResolution);responseDisplay.innerHTML = `?cmd${Command.MOVE_FORWARD}-${adcResolution}`;});accelerator.addEventListener(`touchend`, () => stepOnBreak(accelerator));}function reverseSetup() {const reverse = document.getElementById(`reverse`);reverse.addEventListener(`touchstart`, () => {reverse.classList.add(`moving`);issueCommand(Command.MOVE_BACKWARD, adcResolution);responseDisplay.innerHTML = `?cmd${Command.MOVE_BACKWARD}-${adcResolution}`;});reverse.addEventListener(`touchend`, () => stepOnBreak(reverse));}function joystickSetup() {for(const stick of document.getElementsByClassName(`stick`)) {history.JoySticks.push({x: 0, y: 0});const id = history.JoySticks.length - 1;stick.addEventListener(`touchmove`, e => {if(!e.touches) return;e.preventDefault();const touchID = getTouchID(e, stick),center = (stick.clientWidth)/2,x = e.touches[touchID].clientX - panel.offsetLeft - stick.parentElement.offsetLeft - center,y = e.touches[touchID].clientY - panel.offsetTop - stick.parentElement.offsetTop - center;if(x >= -0.5*center && x <= 1.5*center) {stick.style.left = `${x}px`;const PWM = Math.floor((x+0.5*center)/stick.clientWidth*adcResolution);if(percentDifference(PWM, history.JoySticks.x) > bufferDifferenceThreshold) {history.JoySticks[id].x = PWM;console.log(`Joystick ${id} - fetched`);}}if(yEnabled && y >= -0.5*center && y <= 1.5*center) {stick.style.top = `${y}px`;const PWM = Math.floor((y+0.5*center)/stick.clientWidth*adcResolution);if(percentDifference(PWM, history.JoySticks.y) > bufferDifferenceThreshold) {history.JoySticks[id].y = PWM;console.log(`Joystick ${id} - fetched`);}}});stick.addEventListener(`touchend`, () => {stick.style.left = stick.style.top = ``;history.JoySticks.x = history.JoySticks.y = adcResolution/2;});}}function dialSetup() {for(const dial of document.getElementsByClassName(\"dial\")) {history.Dials.push({ direction: ``, angle: 0 });const id = history.Dials.length - 1;dial.addEventListener(`touchmove`, e => {e.preventDefault();const touchID = getTouchID(e, dial),{left, top, width, height} = dial.getBoundingClientRect(),centerDistanceX = e.touches[touchID].clientX - (left + width/2),centerDistanceY = e.touches[touchID].clientY - (top + height/2),upperBound = 180;let angle = Math.round(Math.atan2(centerDistanceY, centerDistanceX) * 180/Math.PI) + 90;if(angle <= 0)angle += 360;if(angle < upperBound && (history.Dials[id].direction == Command.TURN_RIGHT || !history.Dials[id].direction)) {dial.style.transform = `rotate(${angle}deg)`;history.Dials[id].direction = Command.TURN_RIGHT;if(angle%5 == 0 && angle != history.Dials[id].angle) {history.Dials[id].angle = angle;issueCommand(Command.TURN_RIGHT, Math.round(angle/upperBound*adcResolution));responseDisplay.innerHTML = `?cmd=${Command.TURN_RIGHT}-${Math.round(angle/upperBound*adcResolution)}`;} elseresponseDisplay.innerHTML = `${history.Dials[id].angle} ${angle}`;} else if(angle > upperBound && (history.Dials[id].direction == Command.TURN_LEFT ||!history.Dials[id].direction)) {dial.style.transform = `rotate(${angle}deg)`;history.Dials[id].direction = Command.TURN_LEFT;if(angle%5 == 0 && angle != history.Dials[id].angle) {history.Dials[id].angle = angle;issueCommand(Command.TURN_LEFT, Math.round((360-angle)/upperBound*adcResolution));responseDisplay.innerHTML = `?cmd=${Command.TURN_LEFT}-${Math.round((360-angle)/upperBound*adcResolution)}`;} elseresponseDisplay.innerHTML = `${history.Dials[id].angle} ${angle}`;}if(percentDifference(angle, 360) < bufferDifferenceThreshold)history.Dials[id].direction = _;});dial.addEventListener(`touchend`, () => {dial.style.removeProperty(`transform`);history.Dials[id].direction = ``;history.Dials[id].angle = 360;issueCommand(Command.STOP);});}}</script><script src=\"index.js\"></script></body></html>";